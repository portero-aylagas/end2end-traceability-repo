name: CI

on: [push, pull_request]

jobs:
  verify:
    name: verify
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mypy bandit

    - name: Static analysis
      run: |
        mypy src/
        bandit -r src/

    - name: Extract PR commit message (not merge)
      if: github.event_name == 'pull_request'
      run: |
        git fetch --unshallow || true
        git fetch origin ${{ github.event.pull_request.head.ref }}
        PR_SHA="${{ github.event.pull_request.head.sha }}"
        COMMIT_MSG=$(git log --format=%B -n 1 $PR_SHA)
        echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV

    - name: Extract push commit message (if not PR)
      if: github.event_name != 'pull_request'
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV
    - name: Traceability enforcement
      run: |
        python REQUIREMENT_COVERAGE_CHECK.py
        python CODE_REQUIREMENT_SCAN.py
        python TEST_REQUIREMENT_SCAN.py
        python COMMIT_REQUIREMENT_ENFORCER.py
        python FUNCTION_REQUIREMENT_CHECK.py

    - name: Validate traceability matrix
      run: python TRACEABILITY_VALIDATION.py

    - name: Generate traceability matrix (dry run)
      run: python GENERATE_TRACEABILITY_MATRIX.py --dry-run || true

    - name: Run tests with coverage
      run: PYTHONPATH=. pytest --cov=src --cov-report=xml --cov-report=html --junitxml=test-results.xml tests/

    - name: Enforce 100% test coverage
      run: coverage report --fail-under=100

    - name: Post REQ validation summary as table
      run: |
        echo "### ðŸ“‹ REQ Coverage Report" >> $GITHUB_STEP_SUMMARY
        python REQ_VALIDATION_REPORT.py >> $GITHUB_STEP_SUMMARY